<?php
/**
 * @file
 *
 * A Module to Integrate CKAN and Drupal.
 *
 *
 */

//module_load_include('inc', 'ckan', 'ckan.import');
module_load_include('inc', 'ckan', 'ckan.users');
module_load_include('inc', 'ckan', 'ckan.groups');
module_load_include('inc', 'ckan', 'ckan.licenses');
module_load_include('inc', 'ckan', 'ckan.packages');
function ckan_menu(){
	$items = array();

		$items['ckan/list'] = array(
    'page callback'   => 'ckan_list',
    'access arguments' => array('access content'),
    'type'            => MENU_CALLBACK,
	);
	$items['ckan/groups'] = array(
    'page callback'   => 'ckan_groups',
    'access arguments' => array('access content'),
    'type'            => MENU_CALLBACK,
	);
	$items['ckan/users'] = array(
    'page callback'   => 'ckan_users',
    'access arguments' => array('access content'),
    'type'            => MENU_CALLBACK,
	);
	$items['ckan/licenses'] = array(
    'page callback'   => 'ckan_licenses',
    'access arguments' => array('access content'),
    'type'            => MENU_CALLBACK,
	);
	$items['admin/config/system/ckan'] = array(
    'title' => 'Ckan',
    'description' => 'Configure Ckan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ckan_admin_settings_form'),
    'access arguments' => array('administer Ckan'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ckan.admin.inc',
	);

	return $items;
}

/**
 * Initialize the ckan object
 *
 *
 */

function ckan_ckan(){
	static $ckan=null;
	if (!$ckan){
		require_once(dirname(__FILE__) . '/ckan.php');
		$ckan=new Ckan(variable_get('ckan_url', 'http://www.ckan.net/'),variable_get('ckan_api', ''));
	}
	return $ckan;
}

/**
 * create a node extrafield
 *
 */
function ckan_createnodeextra($name,$value){
	$nd = new stdClass(); // We create a new node object
	$nd->type = "ckan_extrafields"; // Or any other content type you want
	$nd->title = "Extra field  ".$name;
	$node->uid = 1;
	$nd->language = LANGUAGE_NONE;
	//$nd->created =strtotime(str_replace("T"," ",$ckan_data-> metadata_created));
	//$nd->changed=strtotime(str_replace("T"," ",$ckan_data-> metadata_last_modified));
	$nd->field_labelchamp[LANGUAGE_NONE][0]['value'] = $name;
	$nd->field_valuechamp[LANGUAGE_NONE][0]['value'] = $value;
	$ndextra = node_submit($nd); // Prepare node for a submit
	node_save($ndextra);
	$nidextra=$ndextra->nid;
	return $nidextra;
}
/**
 * check if a node extrafield exists already
 *
 */
function ckan_checkextra($name,$value){
	$query = db_select('field_data_field_labelchamp', 'l');
	$query->join('field_data_field_valuechamp', 'v', 'l.entity_id = v.entity_id'); // inner_join file_usage table against file_managed
	$query->fields('l', array('entity_id'))->condition('l.field_labelchamp_value', $name, '=')->condition("v.field_valuechamp_value",$value,'=');
	$result = $query->execute();
	$nidextra=key($result->fetchAllAssoc('entity_id'));
	return $nidextra;
}

/**
 * Th hook_cron
 *
 *
 */
function ckan_cron(){
	//ckan_users();
	//ckan_groups();
	//ckan_list();

	 $myField_name = "my_new_field_name";
    if(!field_info_field($myField_name)) // check if the field already exists.
    {
        $field = array(
            'field_name'    => $myField_name,
            'type'          => 'image',
        );
        field_create_field($field);

        $field_instance = array(
            'field_name'    => $myField_name,
            'entity_type'   => 'node',
            'bundle'        => 'user',
            'label'         => t('Select an image'),
            'description'   => t(''),
            'widget'        => array(
                'type'      => 'image_image',
                'weight'    => 10,
            ),
            'formatter'     => array(
                'label'     => t('label'),
                'format'    => 'image'
            ),
            'settings'      => array(
                'file_directory'        => 'photos', // save inside "public://photos"
                'max_filesize'          => '4M',
                'preview_image_style'   => 'thumbnail',
                'title_field'           => TRUE,
                'alt_field'             => FALSE,
            )
        );
        field_create_instance($field_instance);
        drupal_set_message("Field created successfully!");
    }



}






